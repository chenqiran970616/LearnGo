package main

import "fmt"

//使用指针同样可以进行数值交换
func swap(a, b *int) {
	// 取a指针的值, 赋给临时变量t
	t := *a
	// 取b指针的值, 赋给a指针指向的变量
	*a = *b
	// 将a指针的值赋给b指针指向的变量
	*b = t
	/*
		*操作符作为右值时，意义是取指针的值，作为左值时，也就是放在赋值操作符的左边时，表示 a 指针指向的变量。
		其实归纳起来，*操作符的根本意义就是操作指针指向的变量。当操作在右值时，就是取指向变量的值，当操作在左值时，就是将值设置给指向的变量。
	*/
}

func main() {
	/*
		Go语言指针
		与 Java 和 .NET 等编程语言不同，Go语言为程序员提供了控制数据结构指针的能力，但是，并不能进行指针运算。Go语言允许你控制特定集合的数据结构、分配的数量以及内存访问模式，这对于构建运行良好的系统是非常重要的。指针对于性能的影响不言而喻，如果你想要做系统编程、操作系统或者网络应用，指针更是不可或缺的一部分。
		指针（pointer）在Go语言中可以被拆分为两个核心概念：
		类型指针，允许对这个指针类型的数据进行修改，传递数据可以直接使用指针，而无须拷贝数据，类型指针不能进行偏移和运算。
		切片，由指向起始元素的原始指针、元素数量和容量组成。
		受益于这样的约束和拆分，Go语言的指针类型变量即拥有指针高效访问的特点，又不会发生指针偏移，从而避免了非法修改关键性数据的问题。同时，垃圾回收也比较容易对不会发生偏移的指针进行检索和回收。
		切片比原始指针具备更强大的特性，而且更为安全。切片在发生越界时，运行时会报出宕机，并打出堆栈，而原始指针只会崩溃
	*/

	//认识指针地址和指针类型

	/*
		一个指针变量可以指向任何一个值的内存地址，它所指向的值的内存地址在 32 和 64 位机器上分别占用 4 或 8 个字节，占用字节的大小与所指向的值的大小无关。
		当一个指针被定义后没有分配到任何变量时，它的默认值为 nil。指针变量通常缩写为 ptr。
		每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用在变量名前面添加&操作符（前缀）来获取变量的内存地址（取地址操作），格式如下：
	*/
	v := 1
	ptr1 := &v // v 的类型为 T
	fmt.Printf("v的内存地址=%p\n", ptr1)
	//其中 v 代表被取地址的变量，变量 v 的地址使用变量 ptr 进行接收，ptr 的类型为*T，称做 T 的指针类型，*代表指针。

	var cat int = 1
	var str string = "banana"
	fmt.Printf("%p %p\n", &cat, &str)
	/*
		代码说明如下：
		第 8 行，声明整型变量 cat。
		第 9 行，声明字符串变量 str。
		第 10 行，使用 fmt.Printf 的动词%p打印 cat 和 str 变量的内存地址，指针的值是带有0x十六进制前缀的一组数据。
		提示：变量、指针和地址三者的关系是，每个变量都拥有地址，指针的值就是地址。
	*/

	/*
		从指针获取指针指向的值
		当使用&操作符对普通变量进行取地址操作并得到变量的指针后，可以对指针使用*操作符，也就是指针取值，代码如下。
	*/
	// 准备一个字符串类型
	var house = "Malibu Point 10880, 90265"
	// 对字符串取地址,使用符号& ptr类型为*string
	ptr := &house
	// 打印ptr的类型
	fmt.Printf("ptr type: %T\n", ptr)
	// 打印ptr的指针地址
	fmt.Printf("address: %p\n", ptr)
	// 对指针进行取值操作,使用符号*
	value := *ptr
	// 取值后的类型
	fmt.Printf("value type: %T\n", value)
	// 指针取值后就是指向变量的值
	fmt.Printf("value: %s\n", value)
	/*
		代码说明如下：
		第 10 行，准备一个字符串并赋值。
		第 13 行，对字符串取地址，将指针保存到变量 ptr 中。
		第 16 行，打印变量 ptr 的类型，其类型为 *string。
		第 19 行，打印 ptr 的指针地址，地址每次运行都会发生变化。
		第 22 行，对 ptr 指针变量进行取值操作，变量 value 的类型为 string。
		第 25 行，打印取值后 value 的类型。
		第 28 行，打印 value 的值。
		取地址操作符&和取值操作符*是一对互补操作符，&取出地址，*根据地址取出地址指向的值。
		变量、指针地址、指针变量、取地址、取值的相互关系和特性如下：
		对变量进行取地址操作使用&操作符，可以获得这个变量的指针变量。
		指针变量的值是指针地址。
		对指针变量进行取值操作使用*操作符，可以获得指针变量指向的原变量的值。
	*/

	/*
		使用指针修改值
		通过指针不仅可以取值，也可以修改值。
		前面已经演示了使用多重赋值的方法进行数值交换，使用指针同样可以进行数值交换，代码如下：
	*/
	// 准备两个变量, 赋值1和2
	x, y := 1, 2
	// 交换变量值
	swap(&x, &y)
	// 输出变量值
	fmt.Println(x, y) // 2， 1

	/*
		创建指针的另一种方法——new() 函数
		Go语言还提供了另外一种方法来创建指针变量，格式如下：
	*/
	str1 := new(string)
	*str1 = "Go语言教程"
	fmt.Println(*str1, str1)

}
