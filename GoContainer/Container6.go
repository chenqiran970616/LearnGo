package main

import "fmt"

func main() {
	/*
		Go语言从切片中删除元素
		Go语言并没有对删除切片元素提供专用的语法或者接口，需要使用切片本身的特性来删除元素，根据要删除元素的位置有三种情况，
		分别是从开头位置删除、从中间位置删除和从尾部删除，其中删除切片尾部的元素速度最快。
	*/

	/*
		从开头删除
	*/
	//	删除开头的元素可以直接移动数据指针：
	a := []int{2, 1, 3, 4, 5, 6, 7, 8}
	fmt.Println(a)
	a = a[1:] // 删除开头1个元素
	fmt.Println(a)
	a = a[3:] // 删除开头N个元素
	fmt.Println(a)
	fmt.Println("--------------------------------------------------------------")

	//也可以不移动数据指针，但是将后面的数据向开头移动，可以用 append 原地完成（所谓原地完成是指在原有的切片数据对应的内存区间内完成，不会导致内存空间结构的变化）：
	a1 := []int{2, 1, 3, 4, 5, 6, 7, 8}
	fmt.Println(a1)
	a1 = append(a1[:0], a1[1:]...) // 删除开头1个元素
	fmt.Println(a1)
	a1 = append(a1[:0], a1[3:]...) // 删除开头N个元素
	fmt.Println(a1)
	fmt.Println("--------------------------------------------------------------")

	//还可以用 copy() 函数来删除开头的元素：
	a2 := []int{2, 1, 3, 4, 5, 6, 7, 8}
	fmt.Println(a2)
	a2 = a2[:copy(a2, a2[1:])] // 删除开头1个元素
	fmt.Println(a2)
	a2 = a2[:copy(a2, a2[3:])] // 删除开头N个元素
	fmt.Println(a2)
	fmt.Println("--------------------------------------------------------------")

	/*
		删除切片指定位置的元素
	*/
	seq := []string{"a", "b", "c", "d", "e"}
	// 指定删除位置
	index := 2
	// 查看删除位置之前的元素和之后的元素
	fmt.Println(seq[:index], seq[index+1:])
	// 将删除点前后的元素连接起来
	seq = append(seq[:index], seq[index+1:]...)
	fmt.Println(seq)
	fmt.Println("--------------------------------------------------------------")

	/*
		从尾部删除
	*/
	b := []int{1, 2, 3, 4, 5, 6, 7, 8}
	fmt.Println(b)
	b = b[:len(b)-1] // 删除尾部1个元素
	fmt.Printf("长度b=%d", len(b))
	fmt.Println(b)
	b = b[:len(b)-3] // 删除尾部N个元素
	fmt.Println(b)
}
